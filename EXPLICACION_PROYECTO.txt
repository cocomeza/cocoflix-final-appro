PROYECTO FINAL: Cocoflix (Lista de Pel√≠culas)

---

¬øDe qu√© trata Cocoflix?
----------------------
Cocoflix es una aplicaci√≥n web donde pod√©s anotar pel√≠culas que quer√©s ver, marcarlas como vistas y filtrarlas seg√∫n el estado o buscarlas por nombre/g√©nero. Tambi√©n incluye una galer√≠a visual de estrenos 2026. Todo se guarda en el navegador, as√≠ que no se pierde al recargar la p√°gina.

---

¬øC√≥mo hice el proyecto? (Explicaci√≥n paso a paso para principiantes)
-------------------------------------------------------------------

1. **Creaci√≥n del proyecto**
   - Us√© Vite para crear un proyecto React porque es r√°pido y f√°cil de usar.
   - Vite es una herramienta que te ayuda a crear y desarrollar aplicaciones web modernas.
   - Instal√© las dependencias con `npm install` (npm es el gestor de paquetes de Node.js).

2. **Estructura de carpetas y archivos (Modularizaci√≥n)**
   - Organic√© el c√≥digo en la carpeta `src/components` para los componentes reutilizables.
   - Cada componente tiene su propio archivo (.jsx) y algunos tienen su propio archivo de estilos (.css).
   - Los archivos principales son: `App.jsx`, `App.css`, y los componentes en `components/`.
   - Las im√°genes se guardan en `public/img/` para acceso directo.

3. **Componentes principales (Explicaci√≥n detallada)**

   **App.jsx (Componente Padre):**
   - Es el coraz√≥n de la app. Maneja el estado global (datos que se comparten entre componentes).
   - Controla qu√© p√°gina se muestra: "Inicio" o "Estrenos 2026".
   - Usa `useState` para manejar `paginaActual` ("home" o "estrenos").
   - Pasa funciones y datos a los componentes hijos mediante props.

   **Header.jsx:**
   - Muestra el t√≠tulo "Cocoflix üé¨" de la aplicaci√≥n.
   - Tiene su propio archivo de estilos `Header.css`.
   - Es un componente simple que solo muestra informaci√≥n.

   **Nav.jsx (Navegaci√≥n):**
   - Barra de navegaci√≥n con botones "Inicio" y "Estrenos 2026".
   - Recibe funciones como props para cambiar la p√°gina actual.
   - El bot√≥n activo se resalta visualmente.
   - No usa React Router, sino estado local para simular navegaci√≥n.

   **Home.jsx (P√°gina Principal):**
   - Contiene toda la l√≥gica de la lista de pel√≠culas.
   - Maneja el estado de las pel√≠culas, filtros y localStorage.
   - Incluye el formulario, filtros y la lista de pel√≠culas.
   - Usa `useState` para: `peliculas`, `filtroTexto`, `filtroEstado`.
   - Usa `useEffect` para guardar/cargar datos del localStorage.

   **Estrenos2026.jsx (Galer√≠a de Estrenos):**
   - Muestra una galer√≠a visual de pel√≠culas de estreno 2026.
   - Puedes agregar im√°genes locales (guardadas en public/img/) o externas (URLs).
   - Usa CSS Grid para mostrar las im√°genes en filas de 3 (responsivo).
   - Ejemplo de c√≥mo agregar im√°genes:
     ```js
     // Para im√°genes locales (guardadas en public/img/)
     const estrenos2026 = [
       {
         titulo: "Los Vengadores: Doomsday",
         imagen: "/img/avengers-doomsday.webp"  // Ruta desde public
       },
       {
         titulo: "Pel√≠cula Externa",
         imagen: "https://ejemplo.com/imagen.jpg"  // URL directa
       }
     ];
     ```

   **Footer.jsx:**
   - Pie de p√°gina simple con copyright.
   - Tiene su propio archivo de estilos `Footer.css`.

   **PeliculaForm.jsx:**
   - Formulario para agregar nuevas pel√≠culas.
   - Es un "formulario controlado": cada input tiene su propio estado.
   - Valida que los campos no est√©n vac√≠os y que el a√±o sea v√°lido.
   - Al enviar, llama a la funci√≥n `onAgregarPelicula` que viene por props.

   **FiltroPeliculas.jsx:**
   - Permite buscar pel√≠culas por texto (t√≠tulo o g√©nero).
   - Permite filtrar por estado (todos, por ver, vistas).
   - Los filtros se aplican en tiempo real.
   - Usa props para recibir y actualizar el estado de los filtros.

   **ListaPeliculas.jsx:**
   - Muestra la lista de pel√≠culas filtradas.
   - Por cada pel√≠cula, renderiza un componente `PeliculaItem`.
   - Usa `.map()` para convertir el array de pel√≠culas en componentes.

   **PeliculaItem.jsx:**
   - Muestra cada pel√≠cula individual.
   - Incluye botones para eliminar o marcar como vista/por ver.
   - El estilo cambia seg√∫n el estado (vista/por ver).

4. **Conceptos de React explicados**

   **Componentes:**
   - Son como "bloques de construcci√≥n" reutilizables.
   - Cada componente tiene su propia l√≥gica y estilos.
   - Se pueden combinar para crear aplicaciones complejas.

   **Props (Propiedades):**
   - Son datos que se pasan de un componente padre a un hijo.
   - Ejemplo: `<Home peliculas={listaPeliculas} />`
   - Permiten que los componentes se comuniquen entre s√≠.

   **useState (Estado):**
   - Permite que un componente "recuerde" datos que pueden cambiar.
   - Ejemplo: `const [peliculas, setPeliculas] = useState([]);`
   - `peliculas` es el valor actual, `setPeliculas` es la funci√≥n para cambiarlo.

   **useEffect (Efectos):**
   - Permite ejecutar c√≥digo cuando algo cambia.
   - Ejemplo: guardar datos en localStorage cuando cambia la lista de pel√≠culas.
   - Se ejecuta despu√©s de que el componente se renderiza.

   **Eventos:**
   - `onClick`: cuando se hace clic en algo.
   - `onChange`: cuando cambia el valor de un input.
   - `onSubmit`: cuando se env√≠a un formulario.

5. **Manejo del estado y datos (Explicaci√≥n detallada)**

   **Estado Global vs Local:**
   - Estado global: datos que se comparten entre varios componentes (ej: lista de pel√≠culas).
   - Estado local: datos que solo usa un componente (ej: texto de un input).

   **localStorage:**
   - Es como una "memoria" del navegador que persiste entre recargas.
   - Solo guarda strings, por eso usamos `JSON.stringify()` y `JSON.parse()`.
   - Ejemplo:
     ```js
     // Guardar
     localStorage.setItem("peliculas", JSON.stringify(peliculas));
     
     // Cargar
     const peliculasGuardadas = localStorage.getItem("peliculas");
     if (peliculasGuardadas) {
       setPeliculas(JSON.parse(peliculasGuardadas));
     }
     ```

6. **Formulario controlado (Explicaci√≥n paso a paso)**

   ```js
   // 1. Estado para cada campo del formulario
   const [titulo, setTitulo] = useState("");
   const [genero, setGenero] = useState("");
   const [anio, setAnio] = useState("");

   // 2. Funci√≥n que se ejecuta cuando cambia el input
   const handleTituloChange = (e) => {
     setTitulo(e.target.value); // e.target.value es el texto del input
   };

   // 3. Input controlado (el valor viene del estado)
   <input
     type="text"
     value={titulo}
     onChange={handleTituloChange}
     placeholder="T√≠tulo de la pel√≠cula"
   />
   ```

7. **Renderizado y filtrado de la lista (Explicaci√≥n detallada)**

   **Renderizado con .map():**
   ```js
   // Convierte cada pel√≠cula en un componente
   {peliculas.map((pelicula, index) => (
     <PeliculaItem
       key={index}
       pelicula={pelicula}
       onEliminar={() => eliminarPelicula(index)}
       onMarcarVista={() => marcarVista(index)}
     />
   ))}
   ```

   **Filtrado con .filter():**
   ```js
   // Filtra pel√≠culas que coincidan con el texto de b√∫squeda
   const peliculasFiltradas = peliculas.filter((pelicula) => {
     const coincideTexto = pelicula.titulo.toLowerCase().includes(filtroTexto.toLowerCase());
     const coincideEstado = filtroEstado === "todos" || pelicula.estado === filtroEstado;
     return coincideTexto && coincideEstado;
   });
   ```

8. **Navegaci√≥n por estado (Sin React Router)**

   ```js
   // En App.jsx
   const [paginaActual, setPaginaActual] = useState("home");

   // Renderizado condicional
   {paginaActual === "estrenos" ? <Estrenos2026 /> : <Home />}

   // En Nav.jsx
   <button onClick={() => setPaginaActual("home")}>Inicio</button>
   <button onClick={() => setPaginaActual("estrenos")}>Estrenos 2026</button>
   ```

9. **Estilos y dise√±o (CSS moderno)**

   **CSS Grid para la galer√≠a:**
   ```css
   .galeria-estrenos {
     display: grid;
     grid-template-columns: repeat(3, 1fr); /* 3 columnas */
     gap: 24px; /* espacio entre elementos */
   }
   
   /* Responsivo */
   @media (max-width: 900px) {
     grid-template-columns: repeat(2, 1fr); /* 2 columnas en tablets */
   }
   @media (max-width: 600px) {
     grid-template-columns: 1fr; /* 1 columna en m√≥viles */
   }
   ```

   **Flexbox para layouts:**
   ```css
   .app-layout {
     display: flex;
     gap: 2rem;
   }
   ```

10. **Flujo de datos en la aplicaci√≥n**

    ```
    App.jsx (Estado global)
         ‚Üì (props)
    Home.jsx (L√≥gica de pel√≠culas)
         ‚Üì (props)
    PeliculaForm.jsx (Agregar pel√≠culas)
    FiltroPeliculas.jsx (Filtrar pel√≠culas)
    ListaPeliculas.jsx (Mostrar pel√≠culas)
         ‚Üì (props)
    PeliculaItem.jsx (Pel√≠cula individual)
    ```

11. **Extras y buenas pr√°cticas**

    **Archivos importantes:**
    - `.gitignore`: Lista archivos que no se suben al repositorio.
    - `package.json`: Configuraci√≥n del proyecto y dependencias.
    - `README.md`: Documentaci√≥n del proyecto.
    - `EXPLICACION_PROYECTO.txt`: Este archivo con explicaciones detalladas.

    **Estructura de carpetas recomendada:**
    ```
    public/
    ‚îî‚îÄ‚îÄ img/              # Im√°genes locales (acceso directo)
    src/
    ‚îú‚îÄ‚îÄ components/       # Componentes reutilizables
    ‚îú‚îÄ‚îÄ App.jsx          # Componente principal
    ‚îú‚îÄ‚îÄ App.css          # Estilos globales
    ‚îî‚îÄ‚îÄ main.jsx         # Punto de entrada
    ```

    **Comandos √∫tiles:**
    ```bash
    npm install          # Instalar dependencias
    npm run dev          # Iniciar servidor de desarrollo
    npm run build        # Construir para producci√≥n
    ```

---

¬øQu√© aprend√≠ con este proyecto?
-------------------------------
- C√≥mo crear componentes reutilizables en React
- C√≥mo manejar estado local y global
- C√≥mo pasar datos entre componentes con props
- C√≥mo usar useEffect para efectos secundarios
- C√≥mo crear formularios controlados
- C√≥mo filtrar y renderizar listas
- C√≥mo usar localStorage para persistencia
- C√≥mo crear navegaci√≥n sin React Router
- C√≥mo trabajar con im√°genes locales (desde public/) y externas
- C√≥mo crear dise√±os responsivos con CSS Grid y Flexbox
- C√≥mo modularizar y organizar c√≥digo en React

---

¬øC√≥mo puedo mejorar este proyecto?
----------------------------------
- Agregar m√°s p√°ginas/secciones
- Implementar React Router para navegaci√≥n real
- Agregar animaciones y transiciones
- Implementar un backend para guardar datos en una base de datos
- Agregar autenticaci√≥n de usuarios
- Agregar m√°s filtros y b√∫squedas avanzadas
- Implementar un sistema de calificaciones
- Agregar trailers o informaci√≥n detallada de las pel√≠culas
- Crear una versi√≥n m√≥vil con React Native
- Agregar tests unitarios

---

