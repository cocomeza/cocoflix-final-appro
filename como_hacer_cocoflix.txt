PASO A PASO PARA CREAR EL PROYECTO COCOFLIX (para principiantes)

1. ¿QUÉ ES COCOFLIX?
Cocoflix es una aplicación web donde puedes ver una lista de películas, agregar nuevas, filtrarlas y ver detalles. Es como una pequeña base de datos de películas.

2. ¿QUÉ NECESITAS ANTES DE EMPEZAR?
- Una computadora con Windows, Mac o Linux.
- Tener instalado Node.js (descargar de https://nodejs.org/)
- Tener instalado un editor de código, como Visual Studio Code (descargar de https://code.visualstudio.com/)

3. CREAR EL PROYECTO DESDE CERO
A. Abre tu editor de código (VS Code recomendado).
B. Abre una terminal (puedes usar la que viene en VS Code: Ver > Terminal).
C. Escribe el siguiente comando para crear una carpeta nueva y entrar en ella:
   mkdir cocoflix
   cd cocoflix
D. Inicializa un proyecto con Vite (herramienta para crear apps de React):
   npm create vite@latest
   (Elige el nombre del proyecto, por ejemplo: cocoflix)
   (Elige "React" y luego "JavaScript")
E. Entra a la carpeta del proyecto:
   cd cocoflix
F. Instala las dependencias:
   npm install
G. Inicia el servidor de desarrollo:
   npm run dev
H. Abre el navegador y entra a la dirección que te muestra la terminal (normalmente http://localhost:5173)

4. ESTRUCTURA DEL PROYECTO
- public/: imágenes y archivos estáticos
- src/: todo el código de la app
- src/components/: componentes de React (partes de la interfaz)

5. CREAR COMPONENTES PRINCIPALES
A. Header.jsx: barra superior con el nombre de la app
B. Nav.jsx: menú de navegación
C. Home.jsx: página principal
D. ListaPeliculas.jsx: muestra la lista de películas
E. PeliculaItem.jsx: muestra una sola película
F. PeliculaForm.jsx: formulario para agregar películas
G. FiltroPeliculas.jsx: para filtrar la lista
H. Footer.jsx: pie de página

6. AGREGAR ESTILOS
Puedes usar archivos .css para cada componente (por ejemplo, Header.css).

7. AGREGAR FUNCIONALIDAD
- Usa useState para manejar la lista de películas y los filtros.
- Usa props para pasar información entre componentes.
- Usa eventos (onClick, onChange) para manejar botones y formularios.

8. AGREGAR IMÁGENES
Pon las imágenes en la carpeta public/img y usa la ruta en los componentes.

9. PROBAR LA APP
Cada vez que guardes cambios, la app se actualiza sola en el navegador.

10. OPCIONAL: SUBIR A GITHUB
- Crea una cuenta en github.com
- Inicializa git en tu proyecto: git init
- Sube tu código siguiendo las instrucciones de GitHub.

---

11. ¿CÓMO CREAR CADA COMPONENTE PRINCIPAL?

A. Header.jsx (barra superior)
1. Ve a la carpeta src/components.
2. Crea un archivo llamado Header.jsx.
3. Escribe este código básico:

import React from "react";
import "./Header.css";

function Header() {
  return (
    <header className="header">
      <h1>Cocoflix</h1>
    </header>
  );
}

export default Header;

4. (Opcional) Crea Header.css para estilos:
.header { background: #222; color: white; padding: 1rem; text-align: center; }

B. Nav.jsx (menú de navegación)
1. Crea Nav.jsx en src/components:

import React from "react";
import "./Nav.css";

function Nav() {
  return (
    <nav className="nav">
      <a href="/">Inicio</a>
      <a href="#agregar">Agregar Película</a>
    </nav>
  );
}

export default Nav;

C. Home.jsx (página principal)
1. Crea Home.jsx en src/components:

import React from "react";

function Home() {
  return (
    <div>
      <h2>Bienvenido a Cocoflix</h2>
      <p>¡Explora y agrega tus películas favoritas!</p>
    </div>
  );
}

export default Home;

D. ListaPeliculas.jsx (lista de películas)
1. Crea ListaPeliculas.jsx en src/components:

import React from "react";
import PeliculaItem from "./PeliculaItem";

function ListaPeliculas({ peliculas }) {
  return (
    <div>
      {peliculas.map((peli, idx) => (
        <PeliculaItem key={idx} pelicula={peli} />
      ))}
    </div>
  );
}

export default ListaPeliculas;

E. PeliculaItem.jsx (una sola película)
1. Crea PeliculaItem.jsx en src/components:

import React from "react";

function PeliculaItem({ pelicula }) {
  return (
    <div className="pelicula-item">
      <h3>{pelicula.titulo}</h3>
      <img src={pelicula.imagen} alt={pelicula.titulo} width="150" />
      <p>{pelicula.descripcion}</p>
    </div>
  );
}

export default PeliculaItem;

F. PeliculaForm.jsx (formulario para agregar)
1. Crea PeliculaForm.jsx en src/components:

import React, { useState } from "react";

function PeliculaForm({ onAgregar }) {
  const [titulo, setTitulo] = useState("");
  const [descripcion, setDescripcion] = useState("");
  const [imagen, setImagen] = useState("");

  function handleSubmit(e) {
    e.preventDefault();
    onAgregar({ titulo, descripcion, imagen });
    setTitulo(""); setDescripcion(""); setImagen("");
  }

  return (
    <form onSubmit={handleSubmit}>
      <input value={titulo} onChange={e => setTitulo(e.target.value)} placeholder="Título" required />
      <input value={imagen} onChange={e => setImagen(e.target.value)} placeholder="URL de imagen" required />
      <textarea value={descripcion} onChange={e => setDescripcion(e.target.value)} placeholder="Descripción" required />
      <button type="submit">Agregar Película</button>
    </form>
  );
}

export default PeliculaForm;

G. FiltroPeliculas.jsx (filtrar la lista)
1. Crea FiltroPeliculas.jsx en src/components:

import React from "react";

function FiltroPeliculas({ filtro, setFiltro }) {
  return (
    <input
      value={filtro}
      onChange={e => setFiltro(e.target.value)}
      placeholder="Buscar película..."
    />
  );
}

export default FiltroPeliculas;

H. Footer.jsx (pie de página)
1. Crea Footer.jsx en src/components:

import React from "react";
import "./Footer.css";

function Footer() {
  return (
    <footer className="footer">
      <p>&copy; 2024 Cocoflix</p>
    </footer>
  );
}

export default Footer;

---

12. ¿CÓMO USAR LOS COMPONENTES EN APP.JSX?

1. Abre src/App.jsx y usa los componentes así:

import React, { useState } from "react";
import Header from "./components/Header";
import Nav from "./components/Nav";
import Home from "./components/Home";
import ListaPeliculas from "./components/ListaPeliculas";
import PeliculaForm from "./components/PeliculaForm";
import FiltroPeliculas from "./components/FiltroPeliculas";
import Footer from "./components/Footer";

function App() {
  const [peliculas, setPeliculas] = useState([]);
  const [filtro, setFiltro] = useState("");

  const peliculasFiltradas = peliculas.filter(peli =>
    peli.titulo.toLowerCase().includes(filtro.toLowerCase())
  );

  function agregarPelicula(peli) {
    setPeliculas([...peliculas, peli]);
  }

  return (
    <div>
      <Header />
      <Nav />
      <Home />
      <FiltroPeliculas filtro={filtro} setFiltro={setFiltro} />
      <PeliculaForm onAgregar={agregarPelicula} />
      <ListaPeliculas peliculas={peliculasFiltradas} />
      <Footer />
    </div>
  );
}

export default App;

---

¡Con esto tienes una guía para crear y conectar cada componente! Si quieres que te explique algún componente con más detalle, solo dime cuál. 